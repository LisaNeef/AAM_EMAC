function plot_aam_filtered_compare(comp,tscale,cam_topography,cam_conductivity)
%plot_aam_filtered_compare(comp,tscale,cam_topography,cam_conductivity)
% plot_aam_filtered_compare.m
% Plot the the timeseries of AAM (filtered to the desired timescale) for various EMAC runs.
% started 14 Oct 2010
%       
% The mac files loaded here are generated by aam_emac_volintegral.m
% Mods:
%	major overhaul on 4-9 Nov 1010
%   10 Nov 2010: add comparison of totals for each vector dimension to geodetic.
%   15 Nov 2010: customize to other timescales, turn into a function.
%   25 Nov 2010: add CAM contrubution for tscale = 3.
%   30 Nov 2010: fixed the reading of OAM and HAM (added conversion to mas and dlod)
%
% INPUTS:
%   comp: 1, 2, or 3
%   tscale: which timescale to look at.
%	tscale = 1: 2-7 year variation.
%	tscale = 2: 30-90 day variations.
%	tscale = 3: 7-20 year variations.
%	tscale = 4: 24-30 month variations (QBO).
%   cam_conductivity: choose 1 or 4
%   cam_topography: chose 't' or 's'
%--------------------------------------------------------------------------

%---------------------------------------INPUTS	-------------------------------------------



% select the timescales to examine here.
if tscale == 1
  Ty = [2,7]; T = Ty*365; 
  y0 = 1975;
  yf = 1999;
  R = 1:7;
end
if tscale == 2
  T = [30,90]; Ty = (1/365)*T; 
  y0 = 1987;
  yf = 1988;
  R = [4,5,7];
end
if tscale == 3
  Ty = [7,20]; T = Ty*365; 
  y0 = 1960;
  yf = 1999;
  R = 1:7;
end
if tscale == 4
  Tm = [23,34];
  Ty = Tm*(1/12); T = Ty*365; 
  y0 = 1960;
  yf = 1999;
  R = 1:7;
end

%---names of EMAC runs to compare.
%  (data files generated by aam_emac_volint.m)
% note that these AAMs have already been converted to mas and ms using the prefactors.

r1 = 'ref2_T31L39';		n1 = 'T31L39';
r2 = 't7_T42L39';		n2 = 'T42L39';
r3 = 'ref_T63L39';		n3 = 'T63L39';
r4 = 'CCMval';			n4 = 'T42L90';
r5 = 'ERA40';			n5 = 'ERA40';
r6 = 'ERAinterim';		n6 = 'ERAinterim';
r7 = 'GEO';			n7 = 'GEO-OAM-HAM';

runs= {r1;r2;r3;r4; r5; r6; r7};
nf = length(runs);
names= {n1;n2;n3;n4;n5;n6; n7};

% cycle through runs, load data, and filter out interannual
fil_order = 2;		% greater than 2 seems to not work for ERA data

% choose type of filter to plot
filtype = 1;		% butterworth filter
%filtype = 2;		% chebyeshev-1 filter
%filtype = 3;		% chebyeshev-2 filter

%-----------------------------------------------------------------------------------------
% plotting stuff:
aam_paper_colors

transparency = 0.3;

lh = zeros(3,nf);

LW = 2;
YL = {'\chi_1 (mas)', '\chi_2 (mas)', '\Delta LOD (ms)'};
if tscale == 1
  TT1 = {'\chi_1 Wind Term 2-7 Year Variation','\chi_1 Mass Term 2-7 Year Variation','\chi_1 2-7 Year Variation'};
  TT2 = {'chi_2 Wind Term 2-7 Year Variation','\chi_2 Mass Term 2-7 Year Variation','\chi_2 2-7 Year Variation'};
  TT3 = {'\Delta LOD Wind Term 2-7 Year Variation','\Delta LOD Mass Term 2-7 Year Variation','\Delta LOD 2-7 Year Variation'};
end
if tscale == 2
  TT1 = {'\chi_1 Wind Term 30-90 Day Variation','\chi_1 Mass Term 30-90 Day Variation','\chi_1 30-90 Day Variation'};
  TT2 = {'\chi_2 Wind Term 30-90 Day Variation','\chi_2 Mass Term 30-90 Day Variation','\chi_2 30-90 Day Variation'};
  TT3 = {'\Delta LOD Wind Term 30-90 Day Variation','\Delta LOD Mass Term 30-90 Day Variation','\Delta LOD 30-90 Day Variation'};
end
if tscale == 3
  TT1 = {'\chi_1 Wind Term 7+ Year Variation','\chi_1 Mass Term 7+ Year Variation','\chi_1 7+ Year Variation'};
  TT2 = {'\chi_2 Wind Term 7+ Year Variation','\chi_2 Mass Term 7+ Year Variation','\chi_2 7+ Year Variation'};
  TT3 = {'\Delta LOD Wind Term 7+ Year Variation','\Delta LOD Mass Term 7+ Year Variation','\Delta LOD 7+ Year Variation'};
end
if tscale == 4
  TT1 = {'\chi_1 Wind Term 23-34 Variation','\chi_1 Mass Term 23-34 Variation','\chi_1 23-34 Variation'};
  TT2 = {'\chi_2 Wind Term 23-34 Variation','\chi_2 Mass Term 23-34 Variation','\chi_2 23-34 Variation'};
  TT3 = {'\Delta LOD Wind Term 23-34 Variation','\Delta LOD Mass Term 23-34 Variation','\Delta LOD 23-34 Variation'};
end
TT = [TT1;TT2;TT3];

% axis for individual terms
ax = zeros(3,2);
if tscale == 1		% interannual
  ax(1,:) = 30*[-1,1];
  ax(2,:) = 20*[-1,1];
  ax(3,:) = 0.5*[-1,1];
end
if tscale == 2		% subseasonal 
  ax(1,:) = 45*[-1,1];
  ax(2,:) = 50*[-1,1];
  ax(3,:) = 0.5*[-1,1];
end
if tscale == 3		% long timescale
  ax(1,:) = 35*[-1,1];
  ax(2,:) = 35*[-1,1];
  ax(3,:) = 0.15*[-1,1];
end
if tscale == 4		% interannual
  ax(1,:) = 10*[-1,1];
  ax(2,:) = 10*[-1,1];
  ax(3,:) = 0.2*[-1,1];
end

%---cycle through the specified runs and load pre-computed AAM data
dec0 = 10*floor(y0/10);
decf = 10*floor(yf/10);
dec = [dec0:10:decf];

for irun = R 
  runid = runs(irun);
  run_name = char(runid);

  % first non-ERA data and non-Geodetic.
  if run_name(1:3) ~= 'ERA' & run_name(1:3) ~= 'GEO'
    % load all the relevant decades and slap together into a timeseries
    xm = zeros(3,1)+NaN;
    xw = zeros(3,1)+NaN;
    mjd = NaN;
    sdir = ['/dsk/nathan/lisa/ex/',char(runid),'/mat/'];
    for idec = 1:length(dec)
      ff = dir([sdir,'*vol*',num2str(dec(idec)),'s.mat']);
      fname = [sdir,ff.name];
      if exist(fname) == 2
        load(fname)
        xm = [xm,Xm];
        xw = [xw,Xw];
        mjd = [mjd,MJD];
      end
    end

    % clear out big variables we don't need anymore
    clear Xm Xw MJD

    % make giant arrays of unfiltered and filtered data
    % and conversion to mas (for X1 and X2) and ms (for LOD)
    mjd = mjd(2:length(mjd));
    xm_LT = nanmean(xm,2);	% long term mean
    xw_LT = nanmean(xw,2);        % long term mean
    xm = xm(:,2:length(mjd));	xw = xw(:,2:length(mjd));
    nt = length(mjd);
    X = zeros(3,3,nt)+NaN;
    XF = zeros(3,3,nt)+NaN;
  
    aam_constants_gross

    gw = find(isfinite(xw(1,:)) == 1);
    gm = find(isfinite(xm(1,:)) == 1);
    X(1,1,gw) = rad2mas*(detrend(xw(1,gw),'constant'));
    X(1,2,gw) = rad2mas*(detrend(xw(2,gw),'constant'));
    X(1,3,gw) = LOD0_ms*(detrend(xw(3,gw),'constant'));
    X(2,1,gm) = rad2mas*(detrend(xm(1,gm),'constant'));
    X(2,2,gm) = rad2mas*(detrend(xm(2,gm),'constant'));
    X(2,3,gm) = LOD0_ms*(detrend(xm(3,gm),'constant'));

    X(3,:,:) = X(1,:,:)+X(2,:,:);
  end
 
  % load ERA excitation functions
  if run_name(1:3) == 'ERA'
    % for ERA data
    [xw,xm,MJD]= read_EFs('aam',run_name,1);
    nt = length(MJD);
    X = zeros(3,3,nt)+NaN;
    XF = zeros(3,3,nt)+NaN;
    xm_dt = xm;	xw_dt = xw;
    for ii = 1:3
      xm_dt(ii,:) = detrend(xm(ii,:),'constant');
      xw_dt(ii,:) = detrend(xw(ii,:),'constant');
    end
    X(1,1:2,:) = rad2mas*xw_dt(1:2,:);
    X(1,3,:) = LOD0_ms*xw_dt(3,:);
    X(2,1:2,:) = rad2mas*xm_dt(1:2,:);
    X(2,3,:) = LOD0_ms*xm_dt(3,:);
    mjd = MJD;

    X(3,:,:) = X(1,:,:)+X(2,:,:);
  end

  % load geodetic excitation functions and OAM, HAM, CAM contributions
  cond = cam_conductivity;
  topog = cam_topography;

  if run_name(1:3) == 'GEO'
    % here select only once-daily data -- it's easier.
    [x1,x2,dlod,mjd_geo,ex1,ex2,edlod] = read_eops('IERS',1);
    [Xw_oam,Xm_oam,mjd_oam] = read_EFs('oam','ERA40',1) ;
    [Xw_ham,Xm_ham,mjd_ham] = read_EFs('ham','ERA40',1) ;
    if tscale == 3
      [x1_cam,x2_cam,dlod_cam,mjd_cam,date_cam] = read_CAM_JH(topog,cond);
    end
  
    % convert OAM and HAM terms to mas (for equatorial terms) and dlod (for X3)
    OAM = Xw_oam*0;	HAM = Xw_ham*0;
    for ieq = 1:2
      OAM(ieq,:) = rad2mas*detrend((Xw_oam(ieq,:)+Xm_oam(ieq,:)),'constant');
      HAM(ieq,:) = rad2mas*detrend((Xw_ham(ieq,:)+Xm_ham(ieq,:)),'constant');
    end
    OAM(3,:) = LOD0_ms*detrend((Xw_oam(3,:)+Xm_oam(3,:)),'constant');
    HAM(3,:) = LOD0_ms*detrend((Xw_ham(3,:)+Xm_ham(3,:)),'constant');

    GEO = [detrend(x1','constant');detrend(x2','constant');detrend(dlod','constant')];
    eGEO = [ex1,ex2,edlod]';	
    if tscale == 3, CAM = [x1_cam, x2_cam, dlod_cam]';  else CAM = 0*GEO; mjd_cam = mjd_geo;	end

    mjd_start = max([min(mjd_oam), min(mjd_ham), min(mjd_geo)]);
    mjd_stop  = min([max(mjd_oam), max(mjd_ham), max(mjd_geo)]);
    nd = mjd_stop-mjd_start+1;
    mjd = mjd_start:1:mjd_stop;
    NET = zeros(3,nd)+NaN;
    EGEO = zeros(3,nd)+NaN;

    for iday = 1:nd
      t_geo = find(mjd_geo == mjd(iday));
      t_oam = find(mjd_oam == mjd(iday));
      t_ham = find(mjd_ham == mjd(iday));
      t_cam = find(round(mjd_cam) == mjd(iday));
      ok = isfinite(t_geo)+isfinite(t_oam)+isfinite(t_ham)+isfinite(t_cam);
      if sum(ok) == 4
        NET(:,iday) = GEO(:,t_geo) - OAM(:,t_oam) - HAM(:,t_ham) - CAM(:,t_cam); 
        EGEO(:,iday) = eGEO(:,t_geo);
      end
    end


    %craft an X array of the same size as other datasets, so that the same code works
    X = zeros(3,3,nd)+NaN;
    XF = zeros(3,3,nd)+NaN;
    eX = zeros(3,3,nd)+NaN;
    eXF = zeros(3,3,nd)+NaN;
    for iterm = 1:3
      X(iterm,:,:) = NET; 
      eX(iterm,:,:) = EGEO; 
    end

  end
  
  % craft a time array that MATLAB can deal with
  nt = size(mjd,2);
  t = mjd*0+NaN;
  [y, m, d] = mjd2date(mjd);
  for ii=1:nt
    if isfinite(mjd(ii)) ==1, t(ii)=datenum([y(ii) m(ii) d(ii)]); end
    % weird correction for CCMVal data 
    if mjd(ii) < mjd(1), t(ii) = NaN; end
  end
%  if irun == 1
    start_year = find(y == y0);
    stop_year = find(y == yf);
    if length(start_year) > 0, bottom = start_year(1); else bottom = 1; end
    if length(stop_year) > 0, top = max(stop_year); else top = length(mjd); end
    tbottom = t(bottom);
    ttop = t(top);
    %if tscale == 2, ttop = tbottom+200;end
%  end


  % cycle through terms and use butterworth or chebyshev to extract period band T


    for iterm = 1:3	% loop over mass and wind terms, and total
      figure(iterm)
      if irun==R(1), clf, end 

      gg = find(isfinite(X(iterm,comp,:)) == 1);
      Xgood = squeeze(X(iterm,comp,gg));
      if run_name(1:3) == 'GEO', eXgood = squeeze(eX(iterm,comp,gg)); else eXgood = Xgood; end

      filter_interval = 1/(mjd(2)-mjd(1));
      Ttop = T(2);
      if tscale == 3, Ttop = []; end
      xf = cfilter(Xgood,filter_interval,T(1),T(2),fil_order,'days');
      exf = cfilter(eXgood,filter_interval,T(1),T(2),fil_order,'days');
      XF(iterm,comp,gg) = xf(:,filtype); 
      %XF(iterm,comp,gg) = Xgood; 
      if  run_name(1:3) == 'GEO'
        eXF(iterm,comp,gg) = exf(:,filtype); 
        eXF(1,:,:) = [mjd;mjd;mjd]*0+NaN;
        eXF(2,:,:) = [mjd;mjd;mjd]*0+NaN; 
        XF(1,:,:) = [mjd;mjd;mjd]*0+NaN;
        XF(2,:,:) = [mjd;mjd;mjd]*0+NaN; 
      end

      % add to the plot
      x = squeeze(XF(iterm,comp,bottom:top))';
      g = find(isfinite(x));
      if length(g) > 0
        tt = t(bottom:top);
        lh(iterm,irun) = plot(tt(g),x(g),'LineWidth',LW,'Color',col(irun,:));
      end
       % for geo, add error estimate
      if run_name(1:3) == 'GEO'
        dx = squeeze(eXF(iterm,comp,bottom:top))';
        %dx = squeeze(eX(iterm,comp,bottom:top))';
        jbfill(tt(g),x(g)+dx(g),x(g)-dx(g),col(irun,:),ones(1,3),1,transparency);
      end

      hold on
      if tscale == 1, datetick('x','yy'), end
      if tscale == 2, datetick('x','mm/yy'), end
      if tscale == 3, datetick('x','yyyy'), end
      if tscale == 4, datetick('x','yyyy'), end
      ylabel(YL(comp))
      xlabel('year')
      title(TT(comp,iterm))
    set(gca,'LineWidth',3.0)

    end  

end


% add legends to all the figures.
for iterm=1:3
  figure(iterm)
  lhandle = squeeze(lh(iterm,R));
  legend(lhandle,char(names(R)),'Orientation','Horizontal','Location','SouthOutside')
  legend('boxoff')
  axis([tbottom,ttop, ax(comp,1), ax(comp,2)]);
end

% export figures
plot_dir = '/home/ig/neef/Documents/Plots/aam_run_comparison/';
if tscale == 1, tscalename = 'interann'; end
if tscale == 2, tscalename = 'subseasonal'; end
if tscale == 4, tscalename = 'qbo'; end
if tscale == 3, tscalename = 'long'; end

if tscale == 3
  fig_name_w = [plot_dir,'comp_',tscalename,'_X',num2str(comp),'_cond',num2str(cond),topog,'w.png'];
  fig_name_m = [plot_dir,'comp_',tscalename,'_X',num2str(comp),'_cond',num2str(cond),topog,'m.png'];
  fig_name_t = [plot_dir,'comp_',tscalename,'_X',num2str(comp),'_cond',num2str(cond),topog,'.png'];
else
  fig_name_w = [plot_dir,'comp_',tscalename,'_X',num2str(comp),'w.png'];
  fig_name_m = [plot_dir,'comp_',tscalename,'_X',num2str(comp),'m.png'];
  fig_name_t = [plot_dir,'comp_',tscalename,'_X',num2str(comp),'.png'];
end

rend = 'opengl';

LW = 4;
ph = 8;        % paper height
pw = 25;        % paper width
fs = 26;        % fontsize

exportfig(1,fig_name_w,'width',pw,'height',ph,'fontmode','fixed', 'fontsize',fs,'color','cmyk','renderer',rend,'LineMode','fixed','LineWidth',LW,'format','png');
exportfig(2,fig_name_m,'width',pw,'height',ph,'fontmode','fixed', 'fontsize',fs,'color','cmyk','renderer',rend,'LineMode','fixed','LineWidth',LW,'format','png');
exportfig(3,fig_name_t,'width',pw,'height',ph,'fontmode','fixed', 'fontsize',fs,'color','cmyk','renderer',rend,'LineMode','fixed','LineWidth',LW,'format','png');



